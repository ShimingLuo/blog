<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Null.</title>
  
  <subtitle>善战者，不武。</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://gavinluo.cn/blog/"/>
  <updated>2018-01-04T03:12:54.996Z</updated>
  <id>http://gavinluo.cn/blog/</id>
  
  <author>
    <name>Shiming.Luo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>特别的WebSocket服务器实现--WeSocketed</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/%E7%89%B9%E5%88%AB%E7%9A%84WebSocket%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0-WeSocketd/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/特别的WebSocket服务器实现-WeSocketd/</id>
    <published>2018-01-04T03:10:11.425Z</published>
    <updated>2018-01-04T03:12:54.996Z</updated>
    
    <content type="html"><![CDATA[<p>它的最大特点，就是后台脚本不限语言，标准输入（stdin）就是 WebSocket 的输入，标准输出（stdout）就是 WebSocket 的输出。</p><p>官网：<a href="http://websocketd.com/" target="_blank" rel="noopener">WeSocketd</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;它的最大特点，就是后台脚本不限语言，标准输入（stdin）就是 WebSocket 的输入，标准输出（stdout）就是 WebSocket 的输出。&lt;/p&gt;
&lt;p&gt;官网：&lt;a href=&quot;http://websocketd.com/&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="WebSocket" scheme="http://gavinluo.cn/blog/categories/WebSocket/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://gavinluo.cn/blog/2018/01/04/%E7%BD%91%E9%A1%B5%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7-Pageres/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/网页截图工具-Pageres/</id>
    <published>2018-01-04T03:10:11.424Z</published>
    <updated>2018-01-04T03:12:54.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Pageres是一款图片自动抓取工具，通过shell是可以给其他语言调用，比如Node.js。很多网页特别长，直接的电脑截图非常麻烦，用ps等工具也非常麻烦，Pageres可以自动抓出截图。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="一、软件安装"><a href="#一、软件安装" class="headerlink" title="一、软件安装"></a>一、软件安装</h2><p> 安装 pageres 时，用于产生截屏的 PhantomJS 会被自动安装；但是也有可能会卡死，或者安装失败，得到错误：Error：spawn EAXXES。如果有这个错误，手动 <a href="http://phantomjs.org/download.html" target="_blank" rel="noopener">下载 PhantomJS</a>，然后重新安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 提示，如果安装缓慢，需要更换使用淘宝镜像资源</span><br><span class="line"># 全局安装</span><br><span class="line">$ npm install --global pageres</span><br><span class="line"># 项目安装，并添加依赖</span><br><span class="line">$ npm install --save pageres</span><br></pre></td></tr></table></figure><blockquote><p>注意：手动下载PhantomJS安装文件，需要手动配置环境变量</p></blockquote><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Pageres是一款图片自动抓取工具，通过shell是可以给其他语言调用，比如Node.js。很多网页特别长，直接的电脑截图非常麻烦，用ps
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Express博客系统</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/Express%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/Express博客系统/</id>
    <published>2018-01-04T03:10:11.422Z</published>
    <updated>2017-12-05T13:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简单的Blog</p><p>源代码： <a href="https://github.com/ShimingLuo/node-blog-demo" target="_blank" rel="noopener">GitHub</a></p><h1 id="技术基础"><a href="#技术基础" class="headerlink" title="技术基础"></a>技术基础</h1><p>nodejs安装使用</p><p>MpngoDB安装使用</p><p>ES6的基础</p><p>Express的使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单路由</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello, express'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/users/:name'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'hello, '</span> + req.params.name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></p><p>supervisor自动重启服务工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ npm install -g supervisor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">$ supervisor --harmony index</span><br></pre></td></tr></table></figure></p><p>ejs模板引擎<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i ejs --save</span><br></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> userRouter = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));<span class="comment">// 设置存放模板文件的目录</span></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);<span class="comment">// 设置模板引擎为 ejs</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, indexRouter);</span><br><span class="line">app.use(<span class="string">'/users'</span>, userRouter);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></p><h1 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h1><p>初始化项目文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure></p><p>安装需要的模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">模块的用处：</span><br><span class="line">express: web 框架</span><br><span class="line">express-session: session 中间件</span><br><span class="line">connect-mongo: 将 session 存储于 mongodb，结合 express-session 使用</span><br><span class="line">connect-flash: 页面通知提示的中间件，基于 session 实现</span><br><span class="line">ejs: 模板</span><br><span class="line">express-formidable: 接收表单及文件的上传中间件</span><br><span class="line">config-lite: 读取配置文件</span><br><span class="line">marked: markdown 解析</span><br><span class="line">moment: 时间格式化</span><br><span class="line">mongolass: mongodb 驱动</span><br><span class="line">objectid-to-timestamp: 根据 ObjectId 生成时间戳</span><br><span class="line">sha1: sha1 加密，用于密码加密</span><br><span class="line">winston: 日志</span><br><span class="line">express-winston: 基于 winston 的用于 express 的日志中间件</span><br></pre></td></tr></table></figure></p><p>配置文件:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ./config/default.js */</span>  </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 程序启动要监听端口号</span></span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    <span class="comment">// express-session 的配置信息</span></span><br><span class="line">    session: &#123;</span><br><span class="line">        secret: <span class="string">'myblog'</span>,</span><br><span class="line">        key: <span class="string">'myblog'</span>,</span><br><span class="line">        maxAge: <span class="number">2592000000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// mongoDB 的地址，blog 为 DB 名</span></span><br><span class="line">    mongodb: <span class="string">'mongodb://localhost:27017/blog'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><blockquote><p>精简代码解释</p></blockquote><p>数据库链接，及表的模型设计</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据库连接</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'config-lite'</span>)(__dirname);</span><br><span class="line"><span class="keyword">var</span> Mongolass = <span class="built_in">require</span>(<span class="string">'mongolass'</span>);</span><br><span class="line"><span class="keyword">var</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>); <span class="comment">// 格式化时间</span></span><br><span class="line"><span class="keyword">var</span> objectIdToTimestamp = <span class="built_in">require</span>(<span class="string">'objectid-to-timestamp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongolass = <span class="keyword">new</span> Mongolass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 id 生成创建时间 created_at</span></span><br><span class="line">mongolass.plugin(<span class="string">'addCreatedAt'</span>, &#123;</span><br><span class="line">    afterFind: <span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">        results.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">            item.created_at = moment(objectIdToTimestamp(item._id)).format(<span class="string">'YYYY-MM-DD HH:mm'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;,</span><br><span class="line">    afterFindOne: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            result.created_at = moment(objectIdToTimestamp(result._id)).format(<span class="string">'YYYY-MM-DD HH:mm'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 链接数据库</span></span><br><span class="line">mongolass.connect(config.mongodb);</span><br><span class="line"></span><br><span class="line"><span class="comment">// User 模型</span></span><br><span class="line">exports.User = mongolass.model(<span class="string">'User'</span>, &#123;</span><br><span class="line">    name: &#123;<span class="attr">type</span>: <span class="string">'string'</span>&#125;,</span><br><span class="line">    password: &#123;<span class="attr">type</span>: <span class="string">'string'</span>&#125;,</span><br><span class="line">    avatar: &#123;<span class="attr">type</span>: <span class="string">'string'</span>&#125;,</span><br><span class="line">    gender: &#123;<span class="attr">type</span>: <span class="string">'string'</span>, <span class="attr">enum</span>: [<span class="string">'m'</span>, <span class="string">'f'</span>, <span class="string">'x'</span>]&#125;,</span><br><span class="line">    bio: &#123;<span class="attr">type</span>: <span class="string">'string'</span>&#125;</span><br><span class="line">&#125;);</span><br><span class="line">exports.User.index(&#123;<span class="attr">name</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">unique</span>: <span class="literal">true</span>&#125;).exec(); <span class="comment">// 根据用户名找到用户，用户名全局唯一</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章模型</span></span><br><span class="line">exports.Post = mongolass.model(<span class="string">'Post'</span>, &#123;</span><br><span class="line">    author: &#123; <span class="attr">type</span>: Mongolass.Types.ObjectId &#125;,</span><br><span class="line">    title: &#123; <span class="attr">type</span>: <span class="string">'string'</span> &#125;,</span><br><span class="line">    content: &#123; <span class="attr">type</span>: <span class="string">'string'</span> &#125;,</span><br><span class="line">    pv: &#123; <span class="attr">type</span>: <span class="string">'number'</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line">exports.Post.index(&#123;<span class="attr">author</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">-1</span>&#125;).exec();<span class="comment">// 按创建时间降序查看用户的文章列表，author升序、_id降序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 留言模型</span></span><br><span class="line">exports.Comment = mongolass.model(<span class="string">'Comment'</span>, &#123;</span><br><span class="line">    author: &#123; <span class="attr">type</span>: Mongolass.Types.ObjectId &#125;,</span><br><span class="line">    content: &#123; <span class="attr">type</span>: <span class="string">'string'</span> &#125;,</span><br><span class="line">    postId: &#123; <span class="attr">type</span>: Mongolass.Types.ObjectId &#125;</span><br><span class="line">&#125;);</span><br><span class="line">exports.Comment.index(&#123; <span class="attr">postId</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">1</span> &#125;).exec(); <span class="comment">// 通过文章 id 获取该文章下所有留言，按留言创建时间升序</span></span><br><span class="line">exports.Comment.index(&#123; <span class="attr">author</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">1</span> &#125;).exec(); <span class="comment">// 通过用户 id 和留言 id 删除一个留言</span></span><br></pre></td></tr></table></figure><p>用户的Module接口设计处理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; User &#125; = <span class="built_in">require</span>(<span class="string">'../lib/mongo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 注册用户</span></span><br><span class="line">    create: <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User.create(user).exec();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 根据用户名获取用户信息</span></span><br><span class="line">    getUserByName: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> User.findOne(&#123; <span class="attr">name</span>: name &#125;).addCreatedAt().exec();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>开发过程中，每次修改需要重启，很是麻烦，可以使用 supervisor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装</span><br><span class="line">npm install -s supervisor</span><br><span class="line"></span><br><span class="line"># 监听文件修改后，自动重启服务器</span><br><span class="line">supervisor --harmony index.js</span><br></pre></td></tr></table></figure></p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>申请线上 MongoDB 数据存储服务。<a href="https://mlab.com/" target="_blank" rel="noopener">MLab</a></p><p>申请成功，并创建数据库厚，添加新的配置文件，production.js，使用，NODE_ENV=production 设置配置文件。</p><blockquote><p>windows 下，全局安装 cross-env 模块， cross-env NODE_ENV=production ……</p></blockquote><p>完成后，开始部署服务器（CentOS 64位）</p><p>安装环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install git <span class="comment">#安装git</span></span><br><span class="line">yum install nodejs <span class="comment">#安装 Node.js</span></span><br><span class="line">yum install npm <span class="comment">#安装 npm</span></span><br><span class="line"></span><br><span class="line">npm i npm -g <span class="comment">#升级 npm</span></span><br><span class="line">npm i pm2 -g <span class="comment">#安装 pm2</span></span><br><span class="line">npm i n -g <span class="comment">#安装 n</span></span><br><span class="line"><span class="comment"># n v6.9.1 #安装 v6.9.1 版本的 Node.js</span></span><br><span class="line"><span class="comment"># n use 6.9.1 #使用 v6.9.1 版本的 Node.js</span></span><br><span class="line">node -v</span><br></pre></td></tr></table></figure></p><blockquote><p>这个时候，有可能安装都不成功哦。比如我的ContOS就是，安装Node不成功，当时是修改咯Node的源成功的</p></blockquote><p>当然，安装 pm2 的时候成功咯，但是，使用时， pm2 -v 报错？？？没有命令，我就懵逼咯当时。</p><p>强行使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># linux下</span></span><br><span class="line"><span class="built_in">which</span> node</span><br><span class="line"></span><br><span class="line"><span class="comment"># windows下</span></span><br><span class="line"><span class="built_in">where</span> node</span><br></pre></td></tr></table></figure></p><p>查看一哈，node的路径，然后并看不出来什么，因为，是快捷方式</p><p>cd 到那个目录下后，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure></p><p>，看到指向咯，真实的node安装地址，cd 到目录下后，惊呆咯。</p><p>安装的都在，访问也能成功，看来是环境变量出问题咯。</p><p>原因是我的，node、npm 都是采用离线安装，然后直接用快捷方式放到 bin/ 下，所有没有配置环境变量。</p><p>没办法，自己设置咯。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置只有当前用户生效的环境配置</span></span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在path=。。。后面添加需要添加环境变量目录</span></span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:/usr/<span class="built_in">local</span>/src/node-v8.4.0-linux-x86/bin</span><br></pre></td></tr></table></figure></p><p>到此，应该都是成功的咯。</p><p>将代码从Git上拉下来，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line"></span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line">pm2 logs</span><br><span class="line"></span><br><span class="line"># pm2 mont</span><br></pre></td></tr></table></figure></p><p>访问。</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;简单的Blog&lt;/p&gt;
&lt;p&gt;源代码： &lt;a href=&quot;https://github.com/ShimingLuo/node-blog-d
      
    
    </summary>
    
      <category term="Express" scheme="http://gavinluo.cn/blog/categories/Express/"/>
    
    
  </entry>
  
  <entry>
    <title>VUE初体验</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/VUE%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/VUE初体验/</id>
    <published>2018-01-04T03:10:11.421Z</published>
    <updated>2017-11-05T13:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VUE简介"><a href="#VUE简介" class="headerlink" title="VUE简介"></a>VUE简介</h2><h2 id="VUE开发开发环境"><a href="#VUE开发开发环境" class="headerlink" title="VUE开发开发环境"></a>VUE开发开发环境</h2><p>一、 安装NodeJs</p><blockquote><p>悄悄的安装就好、npm + node</p></blockquote><p>二、 安装VUE官方构建工具—-vue-cli</p><ol><li>简介</li></ol><p>vue-cli是官方的项目构建工具，一个简单的构建工具，通过几个默认的步骤帮助你快速的构建Vue.js项目。</p><ol><li>安装</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国内速度的原因，请更换npm镜像</span></span><br><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure><ol><li>选择模板</li></ol><p>官方项目模板 <a href="https://github.com/vuejs-templates" target="_blank" rel="noopener">vuejs-templates</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue init &lt;template-name&gt; &lt;project-name&gt;</span><br></pre></td></tr></table></figure><p>也可以是用以下命令来查看官方模板列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vue list</span><br></pre></td></tr></table></figure><p>目前官方包含可用的：</p><ul><li><a href="https://github.com/vuejs-templates/browserify" target="_blank" rel="noopener">browserify</a> –– 全功能的Browserify + vueify，包括热加载，静态检测，单元测试</li><li><a href="https://github.com/vuejs-templates/browserify-simple" target="_blank" rel="noopener">browserify-simple</a> –– 一个简易的Browserify + vueify，以便于快速开始。</li><li><a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="noopener">webpack</a> –– 全功能的Webpack + vueify，包括热加载，静态检测，单元测试</li><li><a href="https://github.com/vuejs-templates/webpack-simple" target="_blank" rel="noopener">webpack-simple</a> –– 一个简易的Webpack + vueify，以便于快速开始。</li><li><a href="https://github.com/vuejs-templates/simple" target="_blank" rel="noopener">simple</a> — 单个HTML文件中最简单的Vue设置</li><li><a href="https://github.com/vuejs-templates/pwa" target="_blank" rel="noopener">pwa</a> — Vue CLI基于WebPACK模板</li></ul><h2 id="第一个项目"><a href="#第一个项目" class="headerlink" title="第一个项目"></a>第一个项目</h2><ol><li>初始化项目</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">vue init webpack vue-demo</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ol><li>预览</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>ss</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;VUE简介&quot;&gt;&lt;a href=&quot;#VUE简介&quot; class=&quot;headerlink&quot; title=&quot;VUE简介&quot;&gt;&lt;/a&gt;VUE简介&lt;/h2&gt;&lt;h2 id=&quot;VUE开发开发环境&quot;&gt;&lt;a href=&quot;#VUE开发开发环境&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="vue" scheme="http://gavinluo.cn/blog/categories/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>电商平台开发（二）</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/电商平台开发（二）/</id>
    <published>2018-01-04T03:10:11.416Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<p>项目通用功能开发</p><h2 id="通用js工具的封装"><a href="#通用js工具的封装" class="headerlink" title="通用js工具的封装"></a>通用js工具的封装</h2><ul><li>网络请求：ajax请求、url配置</li><li>URL路径工具</li><li>模板渲染工具 – hogan</li><li>字段验证 &amp;&amp; 通用提示</li><li>统一跳转</li><li>。。。</li></ul><h2 id="界面布局"><a href="#界面布局" class="headerlink" title="界面布局"></a>界面布局</h2><p>没有设计狮，程序猿。</p><ul><li>能爽死强迫症的对齐</li><li>你不知道的对称美</li><li>扁平化多, 减少代码量美观</li><li>保持一定的距离</li><li>配色是一门学问，灰色比较白搭（高端灰）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;项目通用功能开发&lt;/p&gt;
&lt;h2 id=&quot;通用js工具的封装&quot;&gt;&lt;a href=&quot;#通用js工具的封装&quot; class=&quot;headerlink&quot; title=&quot;通用js工具的封装&quot;&gt;&lt;/a&gt;通用js工具的封装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;网络请求：ajax请求、url配置&lt;/l
      
    
    </summary>
    
      <category term="demo" scheme="http://gavinluo.cn/blog/categories/demo/"/>
    
    
  </entry>
  
  <entry>
    <title>NodeJs+PhantomJS获取网站截图</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/NodeJs-PhantomJS%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99%E6%88%AA%E5%9B%BE/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/NodeJs-PhantomJS获取网站截图/</id>
    <published>2018-01-04T03:10:11.413Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>NodeJs – 添加环境变量</p><p>PhantomJS – 添加环境变量</p><h2 id="安装所需库"><a href="#安装所需库" class="headerlink" title="安装所需库"></a>安装所需库</h2><p><a href="https://github.com/sindresorhus/pageres" target="_blank" rel="noopener">pageres</a>：基于 PhantomJS 的截图库，没有安装 PhantomJS 会自动安装，如果安装失败手动安装就好</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 pageres</span></span><br><span class="line">$ npm install pageres</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Pageres = <span class="built_in">require</span>(<span class="string">'pageres'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pageres = <span class="keyword">new</span> Pageres(&#123;<span class="attr">delay</span>: <span class="number">2</span>&#125;)</span><br><span class="line">.src(<span class="string">'gavinluo.cn'</span>, [<span class="string">'480x320'</span>, <span class="string">'1024x768'</span>, <span class="string">'iphone 5s'</span>], &#123;<span class="attr">crop</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">.src(<span class="string">'gavinluo.cn/gank'</span>, [<span class="string">'iphone 5s'</span>], &#123;<span class="attr">crop</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">.src(<span class="string">'gavinluo.cn/blog'</span>, [<span class="string">'1280x1024'</span>, <span class="string">'1920x1080'</span>])</span><br><span class="line">.src(<span class="string">'data:text/html;base64,PGgxPkZPTzwvaDE+'</span>, [<span class="string">'1024x768'</span>])</span><br><span class="line">.dest(__dirname)</span><br><span class="line">.run()</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'done'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;NodeJs – 添加环境变量&lt;/p&gt;
&lt;p&gt;PhantomJS – 添加环境变量&lt;/p&gt;
&lt;h2 id=&quot;安装所需库&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="NodeJs" scheme="http://gavinluo.cn/blog/categories/NodeJs/"/>
    
    
  </entry>
  
  <entry>
    <title>Gulp配置模板</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/Gulp%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%9D%BF/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/Gulp配置模板/</id>
    <published>2018-01-04T03:10:11.412Z</published>
    <updated>2017-01-01T13:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    connect = <span class="built_in">require</span>(<span class="string">'gulp-connect'</span>),</span><br><span class="line">    proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ROOT_DIR = <span class="string">'dist/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// server</span></span><br><span class="line">gulp.task(<span class="string">'connect'</span>, () =&gt; &#123;</span><br><span class="line">    connect.server(&#123;</span><br><span class="line">        livereload: <span class="literal">true</span>,</span><br><span class="line">        middleware: <span class="function">(<span class="params">connect, opt</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> middle = [];</span><br><span class="line">            <span class="comment">// 解析代理，中间健</span></span><br><span class="line">            middle.push(proxy(<span class="string">'/api'</span>, &#123;</span><br><span class="line">                target: <span class="string">'http://bim.groupinno.com/api'</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="comment">// 解析代理，中间健</span></span><br><span class="line">            middle.push(proxy(<span class="string">'/web'</span>, &#123;</span><br><span class="line">                target: <span class="string">'http://bim.groupinno.com/web'</span>,</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/web'</span>: <span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// watch</span></span><br><span class="line">gulp.task(<span class="string">'watch'</span>, () =&gt; &#123;</span><br><span class="line">    gulp.watch([<span class="string">'**/*.*'</span>, <span class="string">'!node_modules/**'</span>]).on(<span class="string">'change'</span>, (event) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString(), event.path, event.type);</span><br><span class="line">        gulp.src(<span class="string">''</span>).pipe(connect.reload());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 资源压缩 */</span></span><br><span class="line"><span class="comment">// 处理 *.html</span></span><br><span class="line">gulp.task(<span class="string">'html'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>);</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./*.html'</span>).pipe(htmlmin(&#123;</span><br><span class="line">        collapseWhitespace: <span class="literal">false</span>,</span><br><span class="line">        removeComments: <span class="literal">true</span></span><br><span class="line">    &#125;)).pipe(gulp.dest(<span class="string">`<span class="subst">$&#123;ROOT_DIR&#125;</span>`</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 处理 *.css</span></span><br><span class="line">gulp.task(<span class="string">'css'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./css/*.css'</span>]).pipe(minifyCSS()).pipe(gulp.dest(<span class="string">`<span class="subst">$&#123;ROOT_DIR&#125;</span>css`</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 处理 *.js</span></span><br><span class="line">gulp.task(<span class="string">'js'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./js/*.js'</span>]).pipe(uglify(&#123;</span><br><span class="line">        mangle: <span class="literal">true</span>,<span class="comment">//类型：Boolean 默认：true 是否修改变量名</span></span><br><span class="line">        compress: <span class="literal">true</span>,<span class="comment">//类型：Boolean 默认：true 是否完全压缩</span></span><br><span class="line">    &#125;)).pipe(gulp.dest(<span class="string">`<span class="subst">$&#123;ROOT_DIR&#125;</span>js`</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 移动资源</span></span><br><span class="line">gulp.task(<span class="string">'lib'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">'./lib/**'</span>]).pipe(gulp.dest(<span class="string">`<span class="subst">$&#123;ROOT_DIR&#125;</span>lib`</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 注意 */</span></span><br><span class="line"><span class="comment">/* 处理资源的时候，需要 return Stram流直接写入文件。。否则，处理打包，上传需要二次执行任务才能成功，且文件目标文件夹必须纯在 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包压缩</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'lib'</span>, <span class="string">'html'</span>, <span class="string">'css'</span>, <span class="string">'js'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包文件夹为，ZIP文件</span></span><br><span class="line">gulp.task(<span class="string">'zip'</span>, [<span class="string">'build'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> zip = <span class="built_in">require</span>(<span class="string">'gulp-zip'</span>);</span><br><span class="line">    gulp.src(<span class="string">`./<span class="subst">$&#123;ROOT_DIR&#125;</span>/**`</span>)</span><br><span class="line">        .pipe(zip(<span class="string">'ucm.zip'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./'</span>))</span><br><span class="line">        .on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> del = <span class="built_in">require</span>(<span class="string">'del'</span>);</span><br><span class="line">            del.sync([ROOT_DIR]);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩后的上传文件到服务器</span></span><br><span class="line">gulp.task(<span class="string">'push'</span>, [<span class="string">'build'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 服务器配置</span></span><br><span class="line">    <span class="keyword">const</span> GulpSSH = <span class="built_in">require</span>(<span class="string">'gulp-ssh'</span>);</span><br><span class="line">    <span class="keyword">var</span> gulpSSH = <span class="keyword">new</span> GulpSSH(&#123;</span><br><span class="line">        ignoreErrors: <span class="literal">false</span>,</span><br><span class="line">        sshConfig: &#123;</span><br><span class="line">            host: <span class="string">'47.100.9.3'</span>,</span><br><span class="line">            port: <span class="number">22</span>,</span><br><span class="line">            username: <span class="string">'luoshiming'</span>,</span><br><span class="line">            password: <span class="string">'qwertyuiop..'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">`./<span class="subst">$&#123;ROOT_DIR&#125;</span>/**`</span>])</span><br><span class="line">        .pipe(gulpSSH.dest(<span class="string">`/projects/GI-X04-Web-pc/ucm/`</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// live-reload</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'connect'</span>, <span class="string">'watch'</span>]);</span><br></pre></td></tr></table></figure><p>#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="gulp" scheme="http://gavinluo.cn/blog/categories/gulp/"/>
    
    
  </entry>
  
  <entry>
    <title>JS下载文件</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/JS%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/JS下载文件/</id>
    <published>2018-01-04T03:10:11.411Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司将会话验证改为，在HTTP请求的Header中存入一个Token键值对，以供后台会话是否过期验证。</p><p>所以在使用，<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/a.jpg"</span> <span class="attr">download</span>=<span class="string">"test.jpg"</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>下载文件时会出现请求401，会话过期的情况</p><p>抓包后，发现下载请求中没有将我们的 Token 字段传回去。</p><p>发现，浏览器在发送请求时，只会自动的将，cookie 中的内容回发回去。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在 HTTP2.0的时代新增加了一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener">new Blob()</a> 容器的概念，所以利用这个，使用js下载文件。</p><p>直接上，请求文件返回 Blob 数据流代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Tools.ajaxBlob = <span class="function"><span class="keyword">function</span> (<span class="params">opt</span>) </span>&#123;</span><br><span class="line">    opt = $.extend(&#123;&#125;, &#123;</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">''</span>,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        headers: &#123;&#125;,</span><br><span class="line">        dataType: <span class="string">'blob'</span>,<span class="comment">// blob流返回类型</span></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span> (<span class="params">data, xhr</span>) </span>&#123;<span class="comment">/* ok */</span>&#125;</span><br><span class="line">    &#125;, opt);<span class="comment">// 默认值</span></span><br><span class="line">    opt.headers[<span class="string">"Token"</span>] = <span class="string">"XXXXXX"</span>;<span class="comment">// 添加字段</span></span><br><span class="line">    <span class="comment">// 验证是否支持</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> history.pushState == <span class="string">"function"</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        xhr.open(opt.type, opt.url + <span class="string">"?"</span> + $.param(opt.data), <span class="literal">true</span>);<span class="comment">//jQuery的序列化，并打开请求</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> opt.headers)&#123;</span><br><span class="line">            xhr.setRequestHeader(key, opt.headers[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.responseType = opt.dataType;</span><br><span class="line">        <span class="comment">// 成功执行</span></span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// this == XMLHttpRequest</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">typeof</span> opt.success === <span class="string">'function'</span>)&#123;</span><br><span class="line">                    opt.success(<span class="keyword">this</span>.response, <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="string">'没法'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>为什么不用 jQuery ajax ？</p><p>我咋知道，查完了，jQuery ajax 的文档，发现dataType返回的数据类型中，并没有 Blob 这个类型。（jQuery2版）</p></blockquote><p>将 调用浏览器的下载功能，下载 Blob 流：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Tools.downBlobFile = <span class="function"><span class="keyword">function</span>(<span class="params">blob, fileName</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.navigator.msSaveOrOpenBlob) &#123;</span><br><span class="line">        navigator.msSaveBlob(blob, fileName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">        link.href = <span class="built_in">window</span>.URL.createObjectURL(blob);<span class="comment">//创建 blob的url</span></span><br><span class="line">        link.download = fileName;</span><br><span class="line">        link.click();</span><br><span class="line">        <span class="built_in">window</span>.URL.revokeObjectURL(link.href);<span class="comment">// 释放</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意，需要查看浏览器是否支持的，详见：<a href="http://caniuse.com/" target="_blank" rel="noopener">Can I Use.</a></p></blockquote><p>over</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;公司将会话验证改为，在HTTP请求的Header中存入一个Token键值对，以供后台会话是否过期验证。&lt;/p&gt;
&lt;p&gt;所以在使用，&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="javascript" scheme="http://gavinluo.cn/blog/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-and-Github搭建博客</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/Hexo-and-Github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/Hexo-and-Github搭建博客/</id>
    <published>2018-01-04T03:10:11.410Z</published>
    <updated>2017-12-05T13:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文："><a href="#正文：" class="headerlink" title="正文："></a>正文：</h2><h6 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h6><ol><li>安装Node（官网：<a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a>）</li><li>安装Git</li><li>GitHub账号</li><li>安装Hexo<blockquote><p>Node和Git都安装好后，可以执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo</span><br></pre></td></tr></table></figure></blockquote></li></ol><h6 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h6><ol><li><p>创建一个hexo文件夹，cd到文件夹下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li><li><p>生成静态页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate（或，hexo g）</span><br></pre></td></tr></table></figure></li><li><p>本地启动预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动默认监听端口：4000</span></span><br><span class="line">$ hexo server（或，hexo s）</span><br></pre></td></tr></table></figure></li><li><p>常见错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li></ol><h6 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo根目录下的配置文件</span></span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure><blockquote><p>定位到，最下（deploy属性），注意：==: 后面需要空格==</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repository: https://github.com/ShimingLuo/ShimingLuo.github.io.git <span class="comment">#ssh key协议直接上 git@github.com:ShimingLuo/ShimingLuo.github.io.git</span></span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><blockquote><p>安装支持Git部署插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>部署</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h6 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h6><blockquote><p>每次按照三个步骤来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 清除原有的、生成、（建议先浏览）、部署</span><br><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>一些常用的hexo命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version <span class="comment">#查看Hexo版本</span></span><br><span class="line">$ hexo <span class="built_in">help</span> <span class="comment">#查看帮助</span></span><br><span class="line">$ hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">$ hexo clean <span class="comment">#清除生成的publick文件</span></span><br><span class="line">$ hexo generate <span class="comment">#生成静态页面至publick目录</span></span><br><span class="line">$ hexo server <span class="comment">#开启预览访问端口（默认端口4000，'ctrl+c'关闭server）</span></span><br><span class="line">$ hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正文：&quot;&gt;&lt;a href=&quot;#正文：&quot; class=&quot;headerlink&quot; title=&quot;正文：&quot;&gt;&lt;/a&gt;正文：&lt;/h2&gt;&lt;h6 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环
      
    
    </summary>
    
      <category term="hexo" scheme="http://gavinluo.cn/blog/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://gavinluo.cn/blog/2018/01/04/%E9%9D%A2%E8%AF%95/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/面试/</id>
    <published>2018-01-04T03:10:11.408Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<p>中级前端工程师，技术需求：<br><a href="https://segmentfault.com/a/1190000002627927" target="_blank" rel="noopener">https://segmentfault.com/a/1190000002627927</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;中级前端工程师，技术需求：&lt;br&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000002627927&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://segmentfault.com/a/11900000
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序入门</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A5%E9%97%A8/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/小程序入门/</id>
    <published>2018-01-04T03:10:11.407Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>开发文档：<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/index.html" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/index.html</a></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>基于微信App的，微信APP Store里的小程序</p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>小程序包含一个描述整体程序的 app 和多个描述各自页面的 page。</p><p>一个小程序主体部分（APP）由三个文件组成，必须放在项目的根目录，如下：</p><table><thead><tr><th>文件</th><th>必填</th><th>作用</th></tr></thead><tbody><tr><td>app.js</td><td>是</td><td>小程序逻辑</td></tr><tr><td>app.json</td><td>是</td><td>小程序公共设置</td></tr><tr><td>app.wxss</td><td>否</td><td>小程序公共样式</td></tr></tbody></table><p>一个小程序页面（APP Pages）由四个文件组成，分别是：</p><table><thead><tr><th>文件类型</th><th>必填</th><th>作用</th></tr></thead><tbody><tr><td>js</td><td>是</td><td>页面逻辑</td></tr><tr><td>wxml</td><td>是</td><td>页面结构</td></tr><tr><td>wxss</td><td>否</td><td>页面样式表</td></tr><tr><td>json</td><td>否</td><td>页面配置</td></tr></tbody></table><p>注意：为了方便开发者减少配置项，规定描述页面的这四个文件必须具有相同的路径与文件名。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>使用 <strong><em>app.json</em></strong> 文件来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</p><p>以下是一个带有所有属性的简单配置 <strong><em>app.json</em></strong> :<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;: [</span><br><span class="line">    &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;pages/logs/logs&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;: &#123;</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;: &quot;black&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;demo&quot;,</span><br><span class="line">    &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,</span><br><span class="line">    &quot;backgroundTextStyle&quot;: &quot;light&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;color&quot;: &quot;#dddddd&quot;,</span><br><span class="line">    &quot;selectedColor&quot;: &quot;#3cc51f&quot;,</span><br><span class="line">    &quot;backgroundColor&quot;: &quot;#ffffff&quot;,</span><br><span class="line">    &quot;borderStyle&quot;: &quot;black&quot;,</span><br><span class="line">    &quot;list&quot;: [&#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">      iconPath: &quot;&quot;,</span><br><span class="line">      selectedIconPath: &quot;&quot;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/logs/logs&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;日志&quot;,</span><br><span class="line">      iconPath: &quot;&quot;,</span><br><span class="line">      selectedIconPath: &quot;&quot;</span><br><span class="line">    &#125;],</span><br><span class="line">    &quot;position&quot;: &quot;bottom&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;networkTimeout&quot;: &#123;</span><br><span class="line">    &quot;request&quot;: 10000,</span><br><span class="line">    &quot;connectSocket&quot;: 10000,</span><br><span class="line">    &quot;uploadFile&quot;: 10000,</span><br><span class="line">    &quot;downloadFile&quot;: 10000</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;debug&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="app-json-配置详细介绍"><a href="#app-json-配置详细介绍" class="headerlink" title="app.json 配置详细介绍"></a><strong><em>app.json</em></strong> 配置详细介绍</h4><p>以下包含属性皆为Object的json对象</p><ul><li><p>pages</p><p>(String)设置页面路径</p></li><li><p>window</p><ul><li><p>navigationBarBackgroundColor</p><p>导航栏背景颜色，如“#000000”</p></li><li><p>navigationBarTextStyle</p><p>导航栏标题颜色，仅支持 black/white  </p></li><li><p>navigationBarTitleText</p><p>导航栏标题文字内容</p></li><li><p>backgroundColor</p><p>窗体的背景色</p></li><li><p>backgroundTextStyle</p><p>下拉背景字体、loading 图的样式，仅支持 dark/light</p></li><li><p>enablePullDownRefresh</p><p>是否开启下拉刷新，详见<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/page.html" target="_blank" rel="noopener">页面相关事件处理函数</a>。  </p></li></ul></li><li><p>tabBar</p><p>如果我们的小程序是一个多 tab 应用（客户端窗口的底部有tab栏可以切换页面），那么我们可以通过 tabBar 配置项指定 tab 栏的表现，以及 tab 切换时显示的对应页面。</p><ul><li><p>color</p><p>tab 上的文字默认颜色</p></li><li><p>selectedColor</p><p>tab 上的文字选中时的颜色</p></li><li><p>backgroundColor</p><p>tab 的背景色</p></li><li><p>borderStyle</p><p>tabbar 上边框的颜色，仅支持 black/white</p></li><li><p>list</p><p>tab 的里列表，类型为数组，包含以下属性：</p><ul><li><p>pagePath</p><p>页面路径，必须在 pages 中先定义</p></li><li><p>text</p><p>tab 上按钮文字</p></li><li><p>iconPath</p><p>图片路径，icon 大小限制为40KB</p></li><li><p>selectedIconPath</p><p>选中时的图片路径，icon 大小限制为40KB</p></li></ul></li><li><p>position</p><p>可选值 bottom、top</p></li></ul></li><li><p>networkTimeout</p><p>可以设置各种网络请求的超时时间。类型都是Number</p><ul><li><p>request</p><p>wx.request 的超时时间，单位毫秒</p></li><li><p>connectSocket</p><p>wx.connectSocket 的超时时间，单位毫秒</p></li><li><p>uploadFile</p><p>wx.uploadFile 的超时时间，单位毫秒</p></li><li><p>downloadFile</p><p>wx.downloadFile 的超时时间，单位毫秒</p></li></ul></li><li><p>debug</p><p>可以在开发者工具中开启 debug 模式，在开发者工具的控制台面板，调试信息以 info 的形式给出，其信息有Page的注册，页面路由，数据更新，事件触发 。 可以帮助开发者快速定位一些常见的问题。</p></li></ul><h4 id="page-json-页面配置"><a href="#page-json-页面配置" class="headerlink" title="page.json 页面配置"></a><strong><em>page.json</em></strong> 页面配置</h4><p>每一个小程序页面也可以使用 .json 文件来对本页面的窗口表现进行配置。 页面的配置比 app.json 全局配置简单得多，只是设置 app.json 中的 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。</p><p>页面的.json只能设置 window 相关的配置项，以决定本页面的窗口表现，所以无需写 window 这个键，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;,</span><br><span class="line">  &quot;navigationBarTextStyle&quot;: &quot;black&quot;,</span><br><span class="line">  &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;,</span><br><span class="line">  &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,</span><br><span class="line">  &quot;backgroundTextStyle&quot;: &quot;light&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;开发文档：&lt;a href=&quot;https://mp.weixin.qq.com/debug/wxadoc/dev/index.html&quot; ta
      
    
    </summary>
    
      <category term="weChat" scheme="http://gavinluo.cn/blog/categories/weChat/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://gavinluo.cn/blog/2018/01/04/BEGIN/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/BEGIN/</id>
    <published>2018-01-04T03:10:11.406Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<p>开始于，2017-08-29 20:18:20</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开始于，2017-08-29 20:18:20&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NPM镜像源使用</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/NPM%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/NPM镜像源/</id>
    <published>2018-01-04T03:10:11.405Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="国内优秀-npm-镜像推荐及使用"><a href="#国内优秀-npm-镜像推荐及使用" class="headerlink" title="国内优秀 npm 镜像推荐及使用"></a>国内优秀 npm 镜像推荐及使用</h2><p>npm全称 Node Package Manager，是 nodejs 的模块依赖管理工具。由于 npm 的源在国外，所以国内访问很是不便。</p><h2 id="国内优秀源"><a href="#国内优秀源" class="headerlink" title="国内优秀源"></a>国内优秀源</h2><h3 id="淘宝-npm-镜像"><a href="#淘宝-npm-镜像" class="headerlink" title="淘宝 npm 镜像"></a>淘宝 npm 镜像</h3><ul><li>搜索地址：<a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></li><li>registry地址：<a href="http://registry.npm/taobao.org/" target="_blank" rel="noopener">http://registry.npm/taobao.org/</a></li></ul><h3 id="cnpmjs-镜像"><a href="#cnpmjs-镜像" class="headerlink" title="cnpmjs 镜像"></a>cnpmjs 镜像</h3><ul><li>搜索地址：<a href="http://cnpmjs.org/" target="_blank" rel="noopener">http://cnpmjs.org/</a></li><li>regitsry地址：<a href="http://r.cnpmjs.org/" target="_blank" rel="noopener">http://r.cnpmjs.org/</a></li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>根据是用场景的不同，配置，npm 的 regitstry 地址。</p><p>以淘宝 npm 镜像安装 express 为例子</p><ol><li>临时使用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure><ol><li>持久使用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否成功</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">npm info express</span><br></pre></td></tr></table></figure><ol><li>通过 cnpm 使用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">cnpm install express</span><br></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title="."></a>.</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;国内优秀-npm-镜像推荐及使用&quot;&gt;&lt;a href=&quot;#国内优秀-npm-镜像推荐及使用&quot; class=&quot;headerlink&quot; title=&quot;国内优秀 npm 镜像推荐及使用&quot;&gt;&lt;/a&gt;国内优秀 npm 镜像推荐及使用&lt;/h2&gt;&lt;p&gt;npm全称 Node Pac
      
    
    </summary>
    
      <category term="NPM" scheme="http://gavinluo.cn/blog/categories/NPM/"/>
    
    
  </entry>
  
  <entry>
    <title>一台服务器配置多个tomcat</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAtomcat/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/一台服务器配置多个tomcat/</id>
    <published>2018-01-04T03:10:11.404Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>系统环境：Linux（ubuntu14.04）</p><h1 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h1><pre><code>1、据说是不要设置CATALINA_HOME（网上说的，我也没有设置）2、分别修改tomcat安装目录下的conf子目录中的server.xml文件：    a、修改http访问端口（默认为8080端口），将8080修改为tomcat不在使用的端口号，&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot; /&gt;。此处所设置的端口号既是以后访问web时所用的端口号。例如：8181。（大概在server.xml的69行）    b、修改其中一个tomcat的shutdown端口号（默认为8005），&lt;Server port=&quot;8005&quot; shutdown=&quot;SHUTDOWN&quot;&gt;，中的端口号修改为不在使用的端口号。例如：8095。（大概在server.xml的22行）    c、修改端口号为8009的端口号，&lt;Connector port=&quot;8009&quot; protocol=&quot;AJP/1.3&quot; redirectPort=&quot;8443&quot; /&gt;，中的端口号为不在使用的端口号，例如：8099。（大概在server.xml的91行）3、依次启动tomcat。</code></pre><p>成功打开：</p><p><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p><p><a href="http://localhost:8181/" target="_blank" rel="noopener">http://localhost:8181/</a></p><p>至此：tomcat在ubuntu上开启多个服务成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;系统环境：Linux（ubuntu14.04）&lt;/p&gt;
&lt;h1 id=&quot;步骤：&quot;&gt;&lt;a href=&quot;#步骤：&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="server" scheme="http://gavinluo.cn/blog/categories/server/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://gavinluo.cn/blog/2018/01/04/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%EF%BC%8CSS%E5%8A%A0%E9%80%9F/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/科学上网，SS加速/</id>
    <published>2018-01-04T03:10:11.402Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/bc5557cc38cd" target="_blank" rel="noopener">FinalSpeed给搬瓦工SS加速</a></p><p><a href="https://home4love.com/3154.html" target="_blank" rel="noopener">Kcptun加速</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.jianshu.com/p/bc5557cc38cd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FinalSpeed给搬瓦工SS加速&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://home4love.c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>网站信息爬虫-基于NodeJs</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E7%88%AC%E8%99%AB-%E5%9F%BA%E4%BA%8ENodeJs/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/网站信息爬虫-基于NodeJs/</id>
    <published>2018-01-04T03:10:11.401Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<p><strong>步骤一：开发环境使用</strong></p><ol><li>下载并安装 NodeJs</li><li>前端编辑器webStorm</li></ol><blockquote><p>注意：安装 NodeJs 后可能 npm 包管理安装不成功（反正我就没有）, 需要自己手动安装 npm包管理器, 自行百度安装包管理器.</p><p>说明：npm（nodejs package manager），nodejs包管理器</p></blockquote><p><strong>步骤二：建立工程</strong></p><ol><li>创建根目录</li><li>npm init  （初始化工程）</li></ol><blockquote><p>检查是否生成 package.json 文件</p></blockquote><ol><li>安装第三方包（程序需要使用的包）</li></ol><p>说明：http模块、fs模块都是内置的包，不需要额外添加。</p><p>安装 cheerio 包, 和 request 包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># cheerio</span><br><span class="line">npm install cheerio -save</span><br><span class="line"># request</span><br><span class="line">npm install request -save</span><br></pre></td></tr></table></figure></p><ol><li>项目文件目录</li></ol><ul><li>创建子文件夹 data （存放所抓取的文本类容）</li><li>创建子文件夹 image （存放抓取的图片资源）</li><li>创建 xyz_spider.js 文件</li></ul><p><strong>步骤三：编写代码 （talk is cheep, show me the code.）</strong></p><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var cheerio = require(&apos;cheerio&apos;);</span><br><span class="line"></span><br><span class="line">var i = 0;</span><br><span class="line">var max_article = 5;// 控制爬去文章数</span><br><span class="line">/**</span><br><span class="line"> * 开始爬虫</span><br><span class="line"> * @param url 爬取数据的地址</span><br><span class="line"> */</span><br><span class="line">function startRequest(url) &#123;</span><br><span class="line">    // 使用 http 模块向服务器发起一次 get 请求</span><br><span class="line">    var request_callee = arguments.callee;</span><br><span class="line">    http.get(url, function (res) &#123;</span><br><span class="line">        var html = &apos;&apos;;// 存储html内容</span><br><span class="line">        var titles = [];</span><br><span class="line">        res.setEncoding(&apos;utf-8&apos;);</span><br><span class="line">        // 监听data， 取数据块</span><br><span class="line">        res.on(&apos;data&apos;, function (chunk) &#123;</span><br><span class="line">            html += chunk;</span><br><span class="line">        &#125;);</span><br><span class="line">        res.on(&apos;end&apos;, function () &#123;</span><br><span class="line">            var $ = cheerio.load(html);// 采用cheerio模块解析html</span><br><span class="line">            var time = $(&apos;.article-info a:first-child&apos;).next().text().trim();</span><br><span class="line">            var news_item = &#123;</span><br><span class="line">                title: $(&apos;div.article-title a&apos;).text().trim(),</span><br><span class="line">                Time: time,</span><br><span class="line">                link: &quot;http://www.ss.pku.edu.cn&quot; + $(&quot;div.article-title a&quot;).attr(&apos;href&apos;),</span><br><span class="line">                author: $(&apos;[title=供稿]&apos;).text().trim(),</span><br><span class="line">                i: i = i+1</span><br><span class="line">            &#125;;</span><br><span class="line">            console.log(news_item);</span><br><span class="line"></span><br><span class="line">            var news_title = $(&apos;div.article-title a&apos;).text().trim();//文章标题</span><br><span class="line">            savedContent($, news_title);// 存储文章的内容及文章标题</span><br><span class="line">            saveImg($, news_title);// 存储文章的图书及图片标题</span><br><span class="line"></span><br><span class="line">            // 控制爬取文章数量</span><br><span class="line">            if(i &lt; max_article)&#123;</span><br><span class="line">                var nextLink = &quot;http://www.ss.pku.edu.cn&quot; + $(&quot;li.next a&quot;).attr(&apos;href&apos;);</span><br><span class="line">                nextLink = nextLink.split(&apos;-&apos;);</span><br><span class="line">                nextLink = encodeURI(nextLink[0]);</span><br><span class="line">                request_callee(nextLink);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).on(&apos;error&apos;, function (err) &#123;</span><br><span class="line">        console.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 保存文章的文本信息</span><br><span class="line"> * @param $ 请求回来的 html 数据解析对象</span><br><span class="line"> * @param news_title 新闻的标题</span><br><span class="line"> */</span><br><span class="line">function savedContent($, news_title) &#123;</span><br><span class="line">    var content = &apos;&apos;;</span><br><span class="line">    $(&apos;.article-content p&apos;).each(function (index, item) &#123;</span><br><span class="line">        var x = $(this).text().trim();</span><br><span class="line"></span><br><span class="line">        if(!!x)&#123;</span><br><span class="line">            content += &apos;\t&apos; + x + &apos;\n&apos;;</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            content += &apos;\t&apos; + &apos;【图片文件】&apos; + &apos;\n&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    // 写入文件</span><br><span class="line">    fs.writeFile(&apos;./data/&apos; + news_title + &apos;.txt&apos;, content, &apos;utf-8&apos;, function (err) &#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 保存文章图片</span><br><span class="line"> * @param $ 请求回来的 html 数据解析对象</span><br><span class="line"> * @param news_title 新闻标题</span><br><span class="line"> */</span><br><span class="line">function saveImg($, news_title) &#123;</span><br><span class="line">    $(&apos;.article-content img&apos;).each(function (index, item) &#123;</span><br><span class="line">        var img_title = $(this).parent().next().text().trim();</span><br><span class="line">        if(img_title.length &gt; 35 || img_title == &apos;&apos;)&#123;</span><br><span class="line">            img_title = &apos;Null&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        var img_filename = img_title + &apos;.jpg&apos;;</span><br><span class="line">        var img_src = &apos;http://www.ss.pku.edu.cn&apos; + $(this).attr(&apos;src&apos;); //获取图片的url</span><br><span class="line">        // 发起请求</span><br><span class="line">        http.get(img_src, function (res) &#123;</span><br><span class="line">            var imgData = &apos;&apos;;</span><br><span class="line">            res.setEncoding(&quot;binary&quot;);//一定要设置response的编码为binary否则会下载下来的图片打不开</span><br><span class="line">            res.on(&apos;data&apos;, function (chunk) &#123;</span><br><span class="line">                imgData += chunk;</span><br><span class="line">            &#125;);</span><br><span class="line">            res.on(&apos;end&apos;, function () &#123;</span><br><span class="line">                fs.writeFile(&apos;./image/&apos; + news_title + &apos;--&apos; + img_filename, imgData, &apos;binary&apos;, function (err) &#123;</span><br><span class="line">                    if(err)&#123;</span><br><span class="line">                        console.log(err);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;).on(&apos;error&apos;, function (err) &#123;</span><br><span class="line">            console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">// 程序入口</span><br><span class="line">function main() &#123;</span><br><span class="line">    var url = &quot;http://www.ss.pku.edu.cn/index.php/newscenter/news/2391&quot;;</span><br><span class="line">    startRequest(url);</span><br><span class="line">&#125;</span><br><span class="line">// 启动程序</span><br><span class="line">main();</span><br></pre></td></tr></table></figure></p><p><strong>总结</strong></p><p>爬虫项目，关键在于选择器的设计。cheerio模块的选择器$，和jQuery选择器规则几乎是一样的。简单的 demo 实战了数据的采集，GitHub 上有一个开源的自制网页版的爬虫（<a href="https://github.com/satrong/node-webcrawler" target="_blank" rel="noopener">传送门</a>），很适合练手。以后来改进这个简单的爬虫，争取向产品化发展。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;步骤一：开发环境使用&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下载并安装 NodeJs&lt;/li&gt;
&lt;li&gt;前端编辑器webStorm&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：安装 NodeJs 后可能 npm 包管理安装不成功（反正我
      
    
    </summary>
    
      <category term="NodeJs" scheme="http://gavinluo.cn/blog/categories/NodeJs/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows下MongoDB安装</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/Windows%E4%B8%8BMongoDB%E5%AE%89%E8%A3%85/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/Windows下MongoDB安装/</id>
    <published>2018-01-04T03:10:11.400Z</published>
    <updated>2017-07-05T13:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网下载：<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">https://www.mongodb.com/download-center?jmp=nav#community</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装后需要创建，数据需要创建数据文件。</p><p>自行创建，或使用Windows资源管理工具创建 无需命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">c:\&gt;<span class="built_in">cd</span> c:\</span><br><span class="line"></span><br><span class="line">c:\&gt;mkdir data</span><br><span class="line"></span><br><span class="line">c:\&gt;<span class="built_in">cd</span> data</span><br><span class="line"></span><br><span class="line">c:\data&gt;mkdir db</span><br><span class="line"></span><br><span class="line">c:\data&gt;<span class="built_in">cd</span> db</span><br><span class="line"></span><br><span class="line">c:\data\db&gt;</span><br></pre></td></tr></table></figure><h2 id="命令行运行-MongoDB-服务器"><a href="#命令行运行-MongoDB-服务器" class="headerlink" title="命令行运行 MongoDB 服务器"></a>命令行运行 MongoDB 服务器</h2><p>为了从命令提示符下运行 MongoDB 服务器，你必须从 MongoDB 目录的 bin 目录中执行 mongod.exe 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath c:\data\db</span><br></pre></td></tr></table></figure><p>执行成功后，会出显等待用户连接数据库的字样。</p><h2 id="将MongodDB服务器，作为Windows服务运行"><a href="#将MongodDB服务器，作为Windows服务运行" class="headerlink" title="将MongodDB服务器，作为Windows服务运行"></a>将MongodDB服务器，作为Windows服务运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --bind_ip yourIPadress --logpath <span class="string">"C:\data\dbConf\mongodb.log"</span> --logappend --dbpath <span class="string">"C:\data\db"</span> --port yourPortNumber --serviceName <span class="string">"YourServiceName"</span> --serviceDisplayName <span class="string">"YourServiceName"</span> --install</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>–bind_ip</td><td>绑定服务IP，若绑定127.0.0.1，则只能本机访问，不指定默认本地所有IP</td></tr><tr><td>–logpath</td><td>定MongoDB日志文件，注意是指定文件不是目录</td></tr><tr><td>–logappend</td><td>使用追加的方式写日志</td></tr><tr><td>–dbpath</td><td>指定数据库路径</td></tr><tr><td>–port</td><td>指定服务端口号，默认端口27017</td></tr><tr><td>–serviceName</td><td>指定服务名称</td></tr><tr><td>–serviceDisplayName</td><td>指定服务名称，有多个mongodb服务时执行。</td></tr><tr><td>–install</td><td>指定作为一个Windows服务安装。</td></tr></tbody></table><h2 id="MongoDB后台管理-Shell"><a href="#MongoDB后台管理-Shell" class="headerlink" title="MongoDB后台管理 Shell"></a>MongoDB后台管理 Shell</h2><p>如果你需要进入MongoDB后台管理，你需要先打开mongodb装目录的下的bin目录，然后执行mongo.exe文件，MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。</p><p>当你进入mongoDB后台后，它默认会链接到 test 文档（数据库）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;官网下载：&lt;a href=&quot;https://www.mongodb.com/download-center?jmp=nav#communit
      
    
    </summary>
    
      <category term="MongoDB" scheme="http://gavinluo.cn/blog/categories/MongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://gavinluo.cn/blog/2018/01/04/%E4%BA%86%E8%A7%A3Node-js/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/了解Node-js/</id>
    <published>2018-01-04T03:10:11.399Z</published>
    <updated>2018-01-04T03:12:54.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Node.js网站：<a href="https://nodejs.org/" target="_blank" rel="noopener">https://nodejs.org/</a><br>中文论坛网站：<a href="https://cnodejs.org/" target="_blank" rel="noopener">https://cnodejs.org/</a></p><p>学习NodeJs：<a href="https://nodeschool.io/" target="_blank" rel="noopener">https://nodeschool.io/</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Node.js网站：&lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;
      
    
    </summary>
    
    
      <category term="NodeJs" scheme="http://gavinluo.cn/blog/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://gavinluo.cn/blog/2018/01/04/VPS%E5%85%8D%E8%B4%B9%E8%B5%84%E6%BA%90/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/VPS免费资源/</id>
    <published>2018-01-04T03:10:11.398Z</published>
    <updated>2018-01-04T03:12:54.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="免费资源总汇"><a href="#免费资源总汇" class="headerlink" title="免费资源总汇"></a>免费资源总汇</h2><p><a href="https://github.com/ripienaar/free-for-dev#paas" target="_blank" rel="noopener">https://github.com/ripienaar/free-for-dev#paas</a></p><h2 id="服务器vps"><a href="#服务器vps" class="headerlink" title="服务器vps"></a>服务器vps</h2><p>快云1元体验1个月服务器</p><p><a href="http://host.zzidc.com/ad.html" target="_blank" rel="noopener">http://host.zzidc.com/ad.html</a></p><p>景安1元买一年主机</p><p><a href="http://host.zzidc.com/tongji/vhost.html" target="_blank" rel="noopener">http://host.zzidc.com/tongji/vhost.html</a></p><p>阿里云免费体验馆</p><p><a href="https://free.aliyun.com/" target="_blank" rel="noopener">https://free.aliyun.com/</a></p><p>尊云免费体验</p><p><a href="http://www.zun.com/tiyan.html" target="_blank" rel="noopener">http://www.zun.com/tiyan.html</a></p><p>金山云免费体验</p><p><a href="https://activity.ksyun.com/1703/index.html" target="_blank" rel="noopener">https://activity.ksyun.com/1703/index.html</a></p><p>腾讯云免费体验</p><p><a href="https://www.qcloud.com/act/free" target="_blank" rel="noopener">https://www.qcloud.com/act/free</a></p><p>华为云免费体验套餐</p><p><a href="http://activity.hwclouds.com/newuser_trial/index.html" target="_blank" rel="noopener">http://activity.hwclouds.com/newuser_trial/index.html</a></p><p>亚马逊免费体验：</p><p><a href="https://amazonaws-china.com/cn/events/cloud/" target="_blank" rel="noopener">https://amazonaws-china.com/cn/events/cloud/</a></p><p>部署NodeJs免费</p><p><a href="https://zeit.co/now" target="_blank" rel="noopener">https://zeit.co/now</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;免费资源总汇&quot;&gt;&lt;a href=&quot;#免费资源总汇&quot; class=&quot;headerlink&quot; title=&quot;免费资源总汇&quot;&gt;&lt;/a&gt;免费资源总汇&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ripienaar/free-for-dev#paa
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于jQuery鼠标经过事件的延时处理</title>
    <link href="http://gavinluo.cn/blog/2018/01/04/jQuery-%E9%BC%A0%E6%A0%87%E7%BB%8F%E8%BF%87%E4%BA%8B%E4%BB%B6%EF%BC%88hover%EF%BC%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%BB%B6%E6%97%B6%E5%A4%84%E7%90%86/"/>
    <id>http://gavinluo.cn/blog/2018/01/04/jQuery-鼠标经过事件（hover）事件的延时处理/</id>
    <published>2018-01-04T03:10:11.396Z</published>
    <updated>2018-01-04T03:12:54.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery-鼠标经过事件（hover）事件的延时处理"><a href="#jQuery-鼠标经过事件（hover）事件的延时处理" class="headerlink" title="jQuery - 鼠标经过事件（hover）事件的延时处理"></a>jQuery - 鼠标经过事件（hover）事件的延时处理</h2><p>延时的方法，离不开window下的setTimeout方法，我使用的jQuery延时实现本质上是setTimeout。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入jquery --&gt;</span><br><span class="line">&lt;script src=&quot;../resource/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    (function ($) &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 扩展 hover 事件，添加延时处理</span><br><span class="line">         * @param hoverEvent 鼠标经过执行的方法</span><br><span class="line">         * @param outEvent 鼠标移除执行的方法</span><br><span class="line">         * @return &#123;*&#125;</span><br><span class="line">         */</span><br><span class="line">        $.fn.hoverDelay = function (hoverEvent, outEvent) &#123;</span><br><span class="line">            var hoverTimer, outTimer;</span><br><span class="line">            return $(this).each(function () &#123;</span><br><span class="line">                $(this).hover(function () &#123;</span><br><span class="line">                    var t = this;</span><br><span class="line">                    clearTimeout(outTimer);</span><br><span class="line">                    hoverTimer = setTimeout(function () &#123;</span><br><span class="line">                        hoverEvent.call(t);</span><br><span class="line">                    &#125;, 500);// 鼠标经过的延时时间</span><br><span class="line">                &#125;, function () &#123;</span><br><span class="line">                    var t = this;</span><br><span class="line">                    clearTimeout(hoverTimer);</span><br><span class="line">                    outTimer = setTimeout(function () &#123;</span><br><span class="line">                        outEvent.call(t);</span><br><span class="line">                    &#125;, 0);// 鼠标移除的延时时间</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(jQuery);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">    </span><br><span class="line">        $(selector).hoverDelay(function () &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;, function () &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jQuery-鼠标经过事件（hover）事件的延时处理&quot;&gt;&lt;a href=&quot;#jQuery-鼠标经过事件（hover）事件的延时处理&quot; class=&quot;headerlink&quot; title=&quot;jQuery - 鼠标经过事件（hover）事件的延时处理&quot;&gt;&lt;/a&gt;jQu
      
    
    </summary>
    
      <category term="jQuery" scheme="http://gavinluo.cn/blog/categories/jQuery/"/>
    
    
  </entry>
  
</feed>
